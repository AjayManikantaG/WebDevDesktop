import { __decorate, __metadata } from "tslib";
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import Swiper from 'swiper';
var SwiperComponent = /** @class */ (function () {
    function SwiperComponent(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    Object.defineProperty(SwiperComponent.prototype, "initialize", {
        set: function (value) {
            this.shouldInitialize = this.initialized ? false : value;
        },
        enumerable: true,
        configurable: true
    });
    SwiperComponent.prototype.ngAfterViewInit = function () {
        if (this.shouldInitialize) {
            this.setup();
        }
    };
    SwiperComponent.prototype.setup = function () {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    };
    SwiperComponent.prototype.ngAfterViewChecked = function () {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    };
    SwiperComponent.prototype.ngOnDestroy = function () {
        this.swiper.destroy(true, true);
    };
    SwiperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], SwiperComponent.prototype, "config", void 0);
    __decorate([
        Input('initialize'),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], SwiperComponent.prototype, "initialize", null);
    SwiperComponent = __decorate([
        Component({
            // tslint:disable-next-line: component-selector
            selector: 'swiper',
            template: "<div\r\n  [ngClass]=\"{\r\n    'swiper-container': config?.containerModifierClass === undefined\r\n  }\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
        }),
        __metadata("design:paramtypes", [ElementRef,
            ChangeDetectorRef])
    ], SwiperComponent);
    return SwiperComponent;
}());
export { SwiperComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC11c2VmdWwtc3dpcGVyLyIsInNvdXJjZXMiOlsibGliL3N3aXBlci9zd2lwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGFBQWEsRUFDYixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLE1BQXlCLE1BQU0sUUFBUSxDQUFDO0FBUy9DO0lBY0UseUJBQ1UsVUFBc0IsRUFDdEIsaUJBQW9DO1FBRHBDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQU50QyxlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsZ0JBQVcsR0FBRyxLQUFLLENBQUM7UUFDcEIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBSzdCLENBQUM7SUFkaUIsc0JBQUksdUNBQVU7YUFBZCxVQUFlLEtBQWM7WUFDaEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzNELENBQUM7OztPQUFBO0lBY0QseUNBQWUsR0FBZjtRQUNFLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVELCtCQUFLLEdBQUw7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixtREFBbUQ7WUFDbkQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUM5RCxpQkFBaUIsQ0FDbEIsQ0FBQztnQkFDRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO2dCQUNGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN4QztZQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQsNENBQWtCLEdBQWxCO1FBQ0UsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7UUFFRCxJQUNFLElBQUksQ0FBQyxhQUFhO1lBQ2xCLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFDeEQ7WUFDQSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7WUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFRCxxQ0FBVyxHQUFYO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7O2dCQTdDcUIsVUFBVTtnQkFDSCxpQkFBaUI7O0lBZHJDO1FBQVIsS0FBSyxFQUFFOzttREFBdUI7SUFDVjtRQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzs7cURBRW5CO0lBTFUsZUFBZTtRQVAzQixTQUFTLENBQUM7WUFDVCwrQ0FBK0M7WUFDL0MsUUFBUSxFQUFFLFFBQVE7WUFDbEIsc0tBQXNDO1lBRXRDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztTQUNoRCxDQUFDO3lDQWdCc0IsVUFBVTtZQUNILGlCQUFpQjtPQWhCbkMsZUFBZSxDQTZEM0I7SUFBRCxzQkFBQztDQUFBLEFBN0RELElBNkRDO1NBN0RZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyVmlld0NoZWNrZWQsXHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBJbnB1dCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IFN3aXBlciwgeyBTd2lwZXJPcHRpb25zIH0gZnJvbSAnc3dpcGVyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdzd2lwZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2lwZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3N3aXBlci5jb21wb25lbnQuY3NzJ10sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIFN3aXBlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgLy8gYWRkIGFsbCB0aGUgb3B0aW9ucyBhcyBvcHRpb25hbCBzZXR0aW5ncyBhbmQgdXNlIHRoZW0gdG8gY3JlYXRlIGFuIG9wdGlvbnMgb2JqZWN0XHJcbiAgQElucHV0KCkgY29uZmlnOiBTd2lwZXJPcHRpb25zO1xyXG4gIEBJbnB1dCgnaW5pdGlhbGl6ZScpIHNldCBpbml0aWFsaXplKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnNob3VsZEluaXRpYWxpemUgPSB0aGlzLmluaXRpYWxpemVkID8gZmFsc2UgOiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN3aXBlcjogU3dpcGVyO1xyXG5cclxuICBwcml2YXRlIHN3aXBlcldyYXBwZXI6IGFueTtcclxuICBwcml2YXRlIHNsaWRlQ291bnQgPSAwO1xyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICBwcml2YXRlIHNob3VsZEluaXRpYWxpemUgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmXHJcbiAgKSB7fVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICBpZiAodGhpcy5zaG91bGRJbml0aWFsaXplKSB7XHJcbiAgICAgIHRoaXMuc2V0dXAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldHVwKCkge1xyXG4gICAgaWYgKCF0aGlzLnN3aXBlcikge1xyXG4gICAgICAvLyBpZiByZW5kZXJlZCBvbiBzZXJ2ZXIgcXVlcnlTZWxlY3RvciBpcyB1bmRlZmluZWRcclxuICAgICAgaWYgKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLnN3aXBlcldyYXBwZXIgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgJy5zd2lwZXItd3JhcHBlcidcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc2xpZGVDb3VudCA9IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudDtcclxuICAgICAgICB0aGlzLnN3aXBlciA9IG5ldyBTd2lwZXIoXHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzd2lwZXIgPiBkaXYnKSxcclxuICAgICAgICAgIHRoaXMuY29uZmlnXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zaG91bGRJbml0aWFsaXplID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XHJcbiAgICBpZiAodGhpcy5zaG91bGRJbml0aWFsaXplKSB7XHJcbiAgICAgIHRoaXMuc2V0dXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuc3dpcGVyV3JhcHBlciAmJlxyXG4gICAgICB0aGlzLnNsaWRlQ291bnQgIT09IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudFxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuc2xpZGVDb3VudCA9IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudDtcclxuICAgICAgdGhpcy5zd2lwZXIudXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuc3dpcGVyLmRlc3Ryb3kodHJ1ZSwgdHJ1ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==