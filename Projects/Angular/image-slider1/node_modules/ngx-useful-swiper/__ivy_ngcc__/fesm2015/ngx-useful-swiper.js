import { __decorate, __metadata } from 'tslib';
import { CommonModule } from '@angular/common';
import { ElementRef, ChangeDetectorRef, Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import Swiper from 'swiper';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

const _c0 = function (a0) { return { "swiper-container": a0 }; };
const _c1 = ["*"];
let SwiperComponent = class SwiperComponent {
    constructor(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    set initialize(value) {
        this.shouldInitialize = this.initialized ? false : value;
    }
    ngAfterViewInit() {
        if (this.shouldInitialize) {
            this.setup();
        }
    }
    setup() {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    }
    ngAfterViewChecked() {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    }
    ngOnDestroy() {
        this.swiper.destroy(true, true);
    }
};
SwiperComponent.ɵfac = function SwiperComponent_Factory(t) { return new (t || SwiperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
SwiperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SwiperComponent, selectors: [["swiper"]], inputs: { initialize: "initialize", config: "config" }, ngContentSelectors: _c1, decls: 2, vars: 3, consts: [[3, "ngClass"]], template: function SwiperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵprojection(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction1(1, _c0, (ctx.config == null ? null : ctx.config.containerModifierClass) === undefined));
    } }, directives: [ɵngcc1.NgClass], styles: ["[_nghost-%COMP%]{display:block}.swiper-container[_ngcontent-%COMP%]{width:100%;height:100%}"], changeDetection: 0 });
SwiperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], SwiperComponent.prototype, "config", void 0);
__decorate([
    Input('initialize'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], SwiperComponent.prototype, "initialize", null);
SwiperComponent = __decorate([ __metadata("design:paramtypes", [ElementRef,
        ChangeDetectorRef])
], SwiperComponent);

let NgxUsefulSwiperModule = class NgxUsefulSwiperModule {
};
NgxUsefulSwiperModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxUsefulSwiperModule });
NgxUsefulSwiperModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxUsefulSwiperModule_Factory(t) { return new (t || NgxUsefulSwiperModule)(); }, imports: [[CommonModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwiperComponent, [{
        type: Component,
        args: [{
                // tslint:disable-next-line: component-selector
                selector: 'swiper',
                template: "<div\r\n  [ngClass]=\"{\r\n    'swiper-container': config?.containerModifierClass === undefined\r\n  }\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }]; }, { initialize: [{
            type: Input,
            args: ['initialize']
        }], config: [{
            type: Input
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxUsefulSwiperModule, { declarations: function () { return [SwiperComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SwiperComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxUsefulSwiperModule, [{
        type: NgModule,
        args: [{
                declarations: [SwiperComponent],
                imports: [CommonModule],
                exports: [SwiperComponent]
            }]
    }], null, null); })();

/*
 * Public API Surface of ngx-useful-swiper
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxUsefulSwiperModule, SwiperComponent };

//# sourceMappingURL=ngx-useful-swiper.js.map