import { __decorate, __metadata } from "tslib";
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, Component, ElementRef, Input, OnDestroy, ChangeDetectionStrategy } from '@angular/core';
import Swiper from 'swiper';
let SwiperComponent = class SwiperComponent {
    constructor(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    set initialize(value) {
        this.shouldInitialize = this.initialized ? false : value;
    }
    ngAfterViewInit() {
        if (this.shouldInitialize) {
            this.setup();
        }
    }
    setup() {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    }
    ngAfterViewChecked() {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    }
    ngOnDestroy() {
        this.swiper.destroy(true, true);
    }
};
SwiperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], SwiperComponent.prototype, "config", void 0);
__decorate([
    Input('initialize'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], SwiperComponent.prototype, "initialize", null);
SwiperComponent = __decorate([
    Component({
        // tslint:disable-next-line: component-selector
        selector: 'swiper',
        template: "<div\r\n  [ngClass]=\"{\r\n    'swiper-container': config?.containerModifierClass === undefined\r\n  }\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
    }),
    __metadata("design:paramtypes", [ElementRef,
        ChangeDetectorRef])
], SwiperComponent);
export { SwiperComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC11c2VmdWwtc3dpcGVyLyIsInNvdXJjZXMiOlsibGliL3N3aXBlci9zd2lwZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLGFBQWEsRUFDYixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixLQUFLLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN4QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLE1BQXlCLE1BQU0sUUFBUSxDQUFDO0FBUy9DLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7SUFjMUIsWUFDVSxVQUFzQixFQUN0QixpQkFBb0M7UUFEcEMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUN0QixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBTnRDLGVBQVUsR0FBRyxDQUFDLENBQUM7UUFDZixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUNwQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFLN0IsQ0FBQztJQWRpQixJQUFJLFVBQVUsQ0FBQyxLQUFjO1FBQ2hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMzRCxDQUFDO0lBY0QsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO0lBQ0gsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixtREFBbUQ7WUFDbkQsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUU7Z0JBQy9DLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUM5RCxpQkFBaUIsQ0FDbEIsQ0FBQztnQkFDRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7Z0JBQ3ZELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsRUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO2dCQUNGLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQzthQUN4QztZQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7U0FDL0I7SUFDSCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNkO1FBRUQsSUFDRSxJQUFJLENBQUMsYUFBYTtZQUNsQixJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLEVBQ3hEO1lBQ0EsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDO1lBQ3ZELElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDdEI7SUFDSCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0YsQ0FBQTs7WUE5Q3VCLFVBQVU7WUFDSCxpQkFBaUI7O0FBZHJDO0lBQVIsS0FBSyxFQUFFOzsrQ0FBdUI7QUFDVjtJQUFwQixLQUFLLENBQUMsWUFBWSxDQUFDOzs7aURBRW5CO0FBTFUsZUFBZTtJQVAzQixTQUFTLENBQUM7UUFDVCwrQ0FBK0M7UUFDL0MsUUFBUSxFQUFFLFFBQVE7UUFDbEIsc0tBQXNDO1FBRXRDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNOztLQUNoRCxDQUFDO3FDQWdCc0IsVUFBVTtRQUNILGlCQUFpQjtHQWhCbkMsZUFBZSxDQTZEM0I7U0E3RFksZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJWaWV3Q2hlY2tlZCxcclxuICBBZnRlclZpZXdJbml0LFxyXG4gIENoYW5nZURldGVjdG9yUmVmLFxyXG4gIENvbXBvbmVudCxcclxuICBFbGVtZW50UmVmLFxyXG4gIElucHV0LFxyXG4gIE9uRGVzdHJveSxcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgU3dpcGVyLCB7IFN3aXBlck9wdGlvbnMgfSBmcm9tICdzd2lwZXInO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcclxuICBzZWxlY3RvcjogJ3N3aXBlcicsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL3N3aXBlci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vc3dpcGVyLmNvbXBvbmVudC5jc3MnXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU3dpcGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuICAvLyBhZGQgYWxsIHRoZSBvcHRpb25zIGFzIG9wdGlvbmFsIHNldHRpbmdzIGFuZCB1c2UgdGhlbSB0byBjcmVhdGUgYW4gb3B0aW9ucyBvYmplY3RcclxuICBASW5wdXQoKSBjb25maWc6IFN3aXBlck9wdGlvbnM7XHJcbiAgQElucHV0KCdpbml0aWFsaXplJykgc2V0IGluaXRpYWxpemUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIHRoaXMuc2hvdWxkSW5pdGlhbGl6ZSA9IHRoaXMuaW5pdGlhbGl6ZWQgPyBmYWxzZSA6IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3dpcGVyOiBTd2lwZXI7XHJcblxyXG4gIHByaXZhdGUgc3dpcGVyV3JhcHBlcjogYW55O1xyXG4gIHByaXZhdGUgc2xpZGVDb3VudCA9IDA7XHJcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgc2hvdWxkSW5pdGlhbGl6ZSA9IHRydWU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWZcclxuICApIHt9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemUpIHtcclxuICAgICAgdGhpcy5zZXR1cCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0dXAoKSB7XHJcbiAgICBpZiAoIXRoaXMuc3dpcGVyKSB7XHJcbiAgICAgIC8vIGlmIHJlbmRlcmVkIG9uIHNlcnZlciBxdWVyeVNlbGVjdG9yIGlzIHVuZGVmaW5lZFxyXG4gICAgICBpZiAodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuc3dpcGVyV3JhcHBlciA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgICAnLnN3aXBlci13cmFwcGVyJ1xyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5zbGlkZUNvdW50ID0gdGhpcy5zd2lwZXJXcmFwcGVyLmNoaWxkRWxlbWVudENvdW50O1xyXG4gICAgICAgIHRoaXMuc3dpcGVyID0gbmV3IFN3aXBlcihcclxuICAgICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N3aXBlciA+IGRpdicpLFxyXG4gICAgICAgICAgdGhpcy5jb25maWdcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnNob3VsZEluaXRpYWxpemUgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcclxuICAgIGlmICh0aGlzLnNob3VsZEluaXRpYWxpemUpIHtcclxuICAgICAgdGhpcy5zZXR1cCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChcclxuICAgICAgdGhpcy5zd2lwZXJXcmFwcGVyICYmXHJcbiAgICAgIHRoaXMuc2xpZGVDb3VudCAhPT0gdGhpcy5zd2lwZXJXcmFwcGVyLmNoaWxkRWxlbWVudENvdW50XHJcbiAgICApIHtcclxuICAgICAgdGhpcy5zbGlkZUNvdW50ID0gdGhpcy5zd2lwZXJXcmFwcGVyLmNoaWxkRWxlbWVudENvdW50O1xyXG4gICAgICB0aGlzLnN3aXBlci51cGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nT25EZXN0cm95KCkge1xyXG4gICAgdGhpcy5zd2lwZXIuZGVzdHJveSh0cnVlLCB0cnVlKTtcclxuICB9XHJcbn1cclxuIl19