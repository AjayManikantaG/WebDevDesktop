import { __decorate, __metadata } from 'tslib';
import { CommonModule } from '@angular/common';
import { ElementRef, ChangeDetectorRef, Input, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import Swiper from 'swiper';

let SwiperComponent = class SwiperComponent {
    constructor(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    set initialize(value) {
        this.shouldInitialize = this.initialized ? false : value;
    }
    ngAfterViewInit() {
        if (this.shouldInitialize) {
            this.setup();
        }
    }
    setup() {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    }
    ngAfterViewChecked() {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    }
    ngOnDestroy() {
        this.swiper.destroy(true, true);
    }
};
SwiperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
__decorate([
    Input(),
    __metadata("design:type", Object)
], SwiperComponent.prototype, "config", void 0);
__decorate([
    Input('initialize'),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], SwiperComponent.prototype, "initialize", null);
SwiperComponent = __decorate([
    Component({
        // tslint:disable-next-line: component-selector
        selector: 'swiper',
        template: "<div\r\n  [ngClass]=\"{\r\n    'swiper-container': config?.containerModifierClass === undefined\r\n  }\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n",
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [":host{display:block}.swiper-container{width:100%;height:100%}"]
    }),
    __metadata("design:paramtypes", [ElementRef,
        ChangeDetectorRef])
], SwiperComponent);

let NgxUsefulSwiperModule = class NgxUsefulSwiperModule {
};
NgxUsefulSwiperModule = __decorate([
    NgModule({
        declarations: [SwiperComponent],
        imports: [CommonModule],
        exports: [SwiperComponent]
    })
], NgxUsefulSwiperModule);

/*
 * Public API Surface of ngx-useful-swiper
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgxUsefulSwiperModule, SwiperComponent };
//# sourceMappingURL=ngx-useful-swiper.js.map
