{"ast":null,"code":"var _jsxFileName = \"/Users/mymac/Desktop/Web_Development/Projects/React_Projects/corona-tracker/src/components/Chart/Chart.jsx\";\n\n/** @format */\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = props => {\n  const [dailyData, setDailyData] = useState([]);\n  useEffect(() => {\n    console.log(\"Ajay\");\n\n    const fetchApi = async () => {\n      setDailyData((await fetchDailyData()));\n    };\n\n    console.log(dailyData);\n    fetchApi();\n  }, []);\n  const lineChart = dailyData.length ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(({\n          confirmed\n        }) => confirmed),\n        label: \"infected\",\n        borderColor: \"#3333ff\",\n        fill: true\n      }, {\n        data: dailyData.map(({\n          deaths\n        }) => deaths),\n        label: \"deaths\",\n        borderColor: \"red\",\n        backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }, lineChart);\n};\n\nexport default Chart;","map":{"version":3,"sources":["/Users/mymac/Desktop/Web_Development/Projects/React_Projects/corona-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","fetchDailyData","Line","Bar","styles","Chart","props","dailyData","setDailyData","console","log","fetchApi","lineChart","length","labels","map","date","datasets","data","confirmed","label","borderColor","fill","deaths","backgroundColor","container"],"mappings":";;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AACF,UAAMC,QAAQ,GAAG,YAAY;AAC3BH,MAAAA,YAAY,EAAC,MAAMP,cAAc,EAArB,EAAZ;AACD,KAFD;;AAGAQ,IAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAI,IAAAA,QAAQ;AACT,GAPQ,EAON,EAPM,CAAT;AASA,QAAMC,SAAS,GAAGL,SAAS,CAACM,MAAV,gBAChB,oBAAC,IAAD;AACE,IAAA,IAAI,EAAE;AACJC,MAAAA,MAAM,EAAEP,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADJ;AAEJC,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,IAAI,EAAEX,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEI,UAAAA;AAAF,SAAD,KAAmBA,SAAjC,CADC;AAEPC,QAAAA,KAAK,EAAE,UAFA;AAGPC,QAAAA,WAAW,EAAE,SAHN;AAIPC,QAAAA,IAAI,EAAE;AAJC,OAAD,EAKP;AAECJ,QAAAA,IAAI,EAAEX,SAAS,CAACQ,GAAV,CAAc,CAAC;AAAEQ,UAAAA;AAAF,SAAD,KAAgBA,MAA9B,CAFP;AAGCH,QAAAA,KAAK,EAAE,QAHR;AAICC,QAAAA,WAAW,EAAE,KAJd;AAKCG,QAAAA,eAAe,EAAE,sBALlB;AAMCF,QAAAA,IAAI,EAAE;AANP,OALO;AAFN,KADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADgB,GAmBd,IAnBJ;AAqBA,sBAAO;AAAK,IAAA,SAAS,EAAElB,MAAM,CAACqB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACJb,SADI,CAAP;AAGD,CApCD;;AAsCA,eAAeP,KAAf","sourcesContent":["/** @format */\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchDailyData } from \"../../api\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport styles from \"./Chart.module.css\";\n\nconst Chart = (props) => {\n  const [dailyData, setDailyData] = useState([]);\n\n  useEffect(() => {\n      console.log(\"Ajay\");\n    const fetchApi = async () => {\n      setDailyData(await fetchDailyData());\n    };\n    console.log(dailyData);\n    fetchApi();\n  }, []);\n\n  const lineChart = dailyData.length ? (\n    <Line\n      data={{\n        labels: dailyData.map(({ date }) => date),\n        datasets: [{\n            data: dailyData.map(({ confirmed }) => confirmed),\n            label: \"infected\",\n            borderColor: \"#3333ff\",\n            fill: true,\n        }, {\n            \n            data: dailyData.map(({ deaths }) => deaths),\n            label: \"deaths\",\n            borderColor: \"red\",\n            backgroundColor: \"rgba(255, 0, 0, 0.5)\",\n            fill: true,\n        }],\n      }}\n    />\n  ) : null;\n\n  return <div className={styles.container}>\n    {lineChart} \n  </div>;\n};\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}